#!/usr/bin/env python
"""
Scummbler v2

    Use, distribution, and modification of the Scummbler binaries, source code,
    or documentation, is subject to the terms of the MIT license, as below.

    Copyright (c) 2011 Laurence Dougal Myers

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

Laurence Dougal Myers
www.jestarjokin.net

December 2008 - July 2009

This file is automatically generated and should not be modified.
Run scummbler_autogen.py to recreate this file.

It is outdated and no longer used as a module, and in fact
there are errors with looking up sub-opcodes.
"""
from pyparsing import *
import scummbler_lexicon
from scummbler_misc import *
from scummbler_opcodes import opFunctionTable

grFunc_actorFollowCamera = Literal("actorFollowCamera")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_actorFollowCamera(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_actorFollowCamera.setParseAction(do_grFunc_actorFollowCamera)

grFunc_actorFromPos = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("actorFromPos")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_actorFromPos(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_actorFromPos.setParseAction(do_grFunc_actorFromPos)

# --- Start sub-opcodes ---
grFunc_ActorOps_Unknown = Literal("Unknown")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_Unknown(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Unknown.setParseAction(do_grFunc_ActorOps_Unknown)
grFunc_ActorOps_Costume = Literal("Costume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_Costume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Costume.setParseAction(do_grFunc_ActorOps_Costume)
grFunc_ActorOps_WalkSpeed = Literal("WalkSpeed")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_ActorOps_WalkSpeed(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_WalkSpeed.setParseAction(do_grFunc_ActorOps_WalkSpeed)
grFunc_ActorOps_Sound = Literal("Sound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_Sound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Sound.setParseAction(do_grFunc_ActorOps_Sound)
grFunc_ActorOps_WalkAnimNr = Literal("WalkAnimNr")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_WalkAnimNr(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_WalkAnimNr.setParseAction(do_grFunc_ActorOps_WalkAnimNr)
grFunc_ActorOps_TalkAnimNr = Literal("TalkAnimNr")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_ActorOps_TalkAnimNr(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_TalkAnimNr.setParseAction(do_grFunc_ActorOps_TalkAnimNr)
grFunc_ActorOps_StandAnimNr = Literal("StandAnimNr")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_StandAnimNr(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_StandAnimNr.setParseAction(do_grFunc_ActorOps_StandAnimNr)
grFunc_ActorOps_Nothing = Literal("Nothing")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg3") + SupLit(")")
def do_grFunc_ActorOps_Nothing(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    arg3, op = resolve_parameter(toks.arg3, op, 0x20, False)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Nothing.setParseAction(do_grFunc_ActorOps_Nothing)
grFunc_ActorOps_Init = Literal("Init")("function") + SupLit("(") + SupLit(")")
def do_grFunc_ActorOps_Init(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Init.setParseAction(do_grFunc_ActorOps_Init)
grFunc_ActorOps_Elevation = Literal("Elevation")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_ActorOps_Elevation(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Elevation.setParseAction(do_grFunc_ActorOps_Elevation)
grFunc_ActorOps_DefaultAnims = Literal("DefaultAnims")("function") + SupLit("(") + SupLit(")")
def do_grFunc_ActorOps_DefaultAnims(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_DefaultAnims.setParseAction(do_grFunc_ActorOps_DefaultAnims)
grFunc_ActorOps_Palette = Literal("Palette")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_ActorOps_Palette(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Palette.setParseAction(do_grFunc_ActorOps_Palette)
grFunc_ActorOps_TalkColor = Literal("TalkColor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_TalkColor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_TalkColor.setParseAction(do_grFunc_ActorOps_TalkColor)
grFunc_ActorOps_Name = Literal("Name")("function") + SupLit("(") + scummbler_lexicon.leString("arg1") + SupLit(")")
def do_grFunc_ActorOps_Name(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1 = toks.arg1 + "\x00"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Name.setParseAction(do_grFunc_ActorOps_Name)
grFunc_ActorOps_InitAnimNr = Literal("InitAnimNr")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_InitAnimNr(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_InitAnimNr.setParseAction(do_grFunc_ActorOps_InitAnimNr)
grFunc_ActorOps_Width = Literal("Width")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_Width(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Width.setParseAction(do_grFunc_ActorOps_Width)
grFunc_ActorOps_Scale = Literal("Scale")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_ActorOps_Scale(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_Scale.setParseAction(do_grFunc_ActorOps_Scale)
grFunc_ActorOps_NeverZClip = Literal("NeverZClip")("function") + SupLit("(") + SupLit(")")
def do_grFunc_ActorOps_NeverZClip(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_NeverZClip.setParseAction(do_grFunc_ActorOps_NeverZClip)
grFunc_ActorOps_SetZClip = Literal("SetZClip")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_SetZClip(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_SetZClip.setParseAction(do_grFunc_ActorOps_SetZClip)
grFunc_ActorOps_IgnoreBoxes = Literal("IgnoreBoxes")("function") + SupLit("(") + SupLit(")")
def do_grFunc_ActorOps_IgnoreBoxes(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_IgnoreBoxes.setParseAction(do_grFunc_ActorOps_IgnoreBoxes)
grFunc_ActorOps_FollowBoxes = Literal("FollowBoxes")("function") + SupLit("(") + SupLit(")")
def do_grFunc_ActorOps_FollowBoxes(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_FollowBoxes.setParseAction(do_grFunc_ActorOps_FollowBoxes)
grFunc_ActorOps_AnimSpeed = Literal("AnimSpeed")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_AnimSpeed(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_AnimSpeed.setParseAction(do_grFunc_ActorOps_AnimSpeed)
grFunc_ActorOps_ShadowMode = Literal("ShadowMode")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_ActorOps_ShadowMode(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps_ShadowMode.setParseAction(do_grFunc_ActorOps_ShadowMode)
grFunc_ActorOps_SO = grFunc_ActorOps_Unknown | grFunc_ActorOps_Costume | grFunc_ActorOps_WalkSpeed | grFunc_ActorOps_Sound | grFunc_ActorOps_WalkAnimNr | grFunc_ActorOps_TalkAnimNr | grFunc_ActorOps_StandAnimNr | grFunc_ActorOps_Nothing | grFunc_ActorOps_Init | grFunc_ActorOps_Elevation | grFunc_ActorOps_DefaultAnims | grFunc_ActorOps_Palette | grFunc_ActorOps_TalkColor | grFunc_ActorOps_Name | grFunc_ActorOps_InitAnimNr | grFunc_ActorOps_Width | grFunc_ActorOps_Scale | grFunc_ActorOps_NeverZClip | grFunc_ActorOps_SetZClip | grFunc_ActorOps_IgnoreBoxes | grFunc_ActorOps_FollowBoxes | grFunc_ActorOps_AnimSpeed | grFunc_ActorOps_ShadowMode
# --- End sub-opcodes ---
grFunc_ActorOps = Literal("ActorOps")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + SupLit("[") + Optional(delimitedList(grFunc_ActorOps_SO))("arg2") + SupLit("]")  + SupLit(")")
def do_grFunc_ActorOps(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    if "arg2" in toks:
        arg2 = ''.join(toks.arg2)
    arg3 = "\xFF"
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_ActorOps.setParseAction(do_grFunc_ActorOps)

grFunc_setClass = Literal("setClass")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + scummbler_lexicon.leArgList("arg2") + SupLit(")")
def do_grFunc_setClass(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    for a in toks.arg2:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg2 += to_byte(aux) + a
    arg2 += "\xFF"
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_setClass.setParseAction(do_grFunc_setClass)

grFunc_animateCostume = Literal("animateCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_animateCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_animateCostume.setParseAction(do_grFunc_animateCostume)

grFunc_breakHere = Literal("breakHere")("function") + SupLit("(") + SupLit(")")
def do_grFunc_breakHere(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_breakHere.setParseAction(do_grFunc_breakHere)

grFunc_chainScript = Literal("chainScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + scummbler_lexicon.leArgList("arg2") + SupLit(")")
def do_grFunc_chainScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    for a in toks.arg2:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg2 += to_byte(aux) + a
    arg2 += "\xFF"
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_chainScript.setParseAction(do_grFunc_chainScript)

# --- Start sub-opcodes ---
grFunc_cursorCommand_CursorShow = Literal("CursorShow")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_CursorShow(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_CursorShow.setParseAction(do_grFunc_cursorCommand_CursorShow)
grFunc_cursorCommand_CursorHide = Literal("CursorHide")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_CursorHide(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_CursorHide.setParseAction(do_grFunc_cursorCommand_CursorHide)
grFunc_cursorCommand_UserputOn = Literal("UserputOn")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_UserputOn(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_UserputOn.setParseAction(do_grFunc_cursorCommand_UserputOn)
grFunc_cursorCommand_UserputOff = Literal("UserputOff")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_UserputOff(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_UserputOff.setParseAction(do_grFunc_cursorCommand_UserputOff)
grFunc_cursorCommand_CursorSoftOn = Literal("CursorSoftOn")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_CursorSoftOn(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_CursorSoftOn.setParseAction(do_grFunc_cursorCommand_CursorSoftOn)
grFunc_cursorCommand_CursorSoftOff = Literal("CursorSoftOff")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_CursorSoftOff(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_CursorSoftOff.setParseAction(do_grFunc_cursorCommand_CursorSoftOff)
grFunc_cursorCommand_UserputSoftOn = Literal("UserputSoftOn")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_UserputSoftOn(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_UserputSoftOn.setParseAction(do_grFunc_cursorCommand_UserputSoftOn)
grFunc_cursorCommand_UserputSoftOff = Literal("UserputSoftOff")("function") + SupLit("(") + SupLit(")")
def do_grFunc_cursorCommand_UserputSoftOff(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_UserputSoftOff.setParseAction(do_grFunc_cursorCommand_UserputSoftOff)
grFunc_cursorCommand_SetCursorImg = Literal("SetCursorImg")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_cursorCommand_SetCursorImg(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_SetCursorImg.setParseAction(do_grFunc_cursorCommand_SetCursorImg)
grFunc_cursorCommand_setCursorHotspot = Literal("setCursorHotspot")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg3") + SupLit(")")
def do_grFunc_cursorCommand_setCursorHotspot(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    arg3, op = resolve_parameter(toks.arg3, op, 0x20, False)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_setCursorHotspot.setParseAction(do_grFunc_cursorCommand_setCursorHotspot)
grFunc_cursorCommand_InitCursor = Literal("InitCursor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_cursorCommand_InitCursor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_InitCursor.setParseAction(do_grFunc_cursorCommand_InitCursor)
grFunc_cursorCommand_InitCharset = Literal("InitCharset")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_cursorCommand_InitCharset(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_InitCharset.setParseAction(do_grFunc_cursorCommand_InitCharset)
grFunc_cursorCommand_CursorCommand = Literal("CursorCommand")("function") + SupLit("(") + scummbler_lexicon.leArgList("arg1") + SupLit(")")
def do_grFunc_cursorCommand_CursorCommand(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    for a in toks.arg1:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg1 += to_byte(aux) + a
    arg1 += "\xFF"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cursorCommand_CursorCommand.setParseAction(do_grFunc_cursorCommand_CursorCommand)
grFunc_cursorCommand_SO = grFunc_cursorCommand_CursorShow | grFunc_cursorCommand_CursorHide | grFunc_cursorCommand_UserputOn | grFunc_cursorCommand_UserputOff | grFunc_cursorCommand_CursorSoftOn | grFunc_cursorCommand_CursorSoftOff | grFunc_cursorCommand_UserputSoftOn | grFunc_cursorCommand_UserputSoftOff | grFunc_cursorCommand_SetCursorImg | grFunc_cursorCommand_setCursorHotspot | grFunc_cursorCommand_InitCursor | grFunc_cursorCommand_InitCharset | grFunc_cursorCommand_CursorCommand
def do_grFunc_cursorCommand_SO(s, loc, toks):
    return to_byte(opFunctionTable["cursorCommand"]) + ''.join(toks)
grFunc_cursorCommand_SO.setParseAction(do_grFunc_cursorCommand_SO)
# --- End sub-opcodes ---



grFunc_cutscene = Literal("cutscene")("function") + SupLit("(") + scummbler_lexicon.leArgList("arg1") + SupLit(")")
def do_grFunc_cutscene(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    for a in toks.arg1:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg1 += to_byte(aux) + a
    arg1 += "\xFF"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_cutscene.setParseAction(do_grFunc_cutscene)

grFunc_debug = Literal("debug?")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_debug(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_debug.setParseAction(do_grFunc_debug)

grFunc_delayVariable = Literal("delayVariable")("function") + SupLit("(") + Group(scummbler_lexicon.leVariable)("arg1") + SupLit(")")
def do_grFunc_delayVariable(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1 = resolve_var(toks.arg1)
    op = op | 0x80
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_delayVariable.setParseAction(do_grFunc_delayVariable)

grFunc_dummyA7 = Literal("dummy(A7)")("function") + SupLit("(") + SupLit(")")
def do_grFunc_dummyA7(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_dummyA7.setParseAction(do_grFunc_dummyA7)

grFunc_endCutscene = Literal("endCutscene")("function") + SupLit("(") + SupLit(")")
def do_grFunc_endCutscene(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_endCutscene.setParseAction(do_grFunc_endCutscene)

grFunc_faceActor = Literal("faceActor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_faceActor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_faceActor.setParseAction(do_grFunc_faceActor)

grFunc_findInventory = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("findInventory")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_findInventory(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_findInventory.setParseAction(do_grFunc_findInventory)

grFunc_findObject = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("findObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_findObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_findObject.setParseAction(do_grFunc_findObject)

grFunc_freezeScripts = Literal("freezeScripts")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_freezeScripts(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_freezeScripts.setParseAction(do_grFunc_freezeScripts)

grFunc_getActorCostume = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorCostume.setParseAction(do_grFunc_getActorCostume)

grFunc_getActorElevation = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorElevation")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorElevation(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorElevation.setParseAction(do_grFunc_getActorElevation)

grFunc_getActorFacing = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorFacing")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorFacing(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorFacing.setParseAction(do_grFunc_getActorFacing)

grFunc_getActorMoving = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorMoving")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorMoving(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorMoving.setParseAction(do_grFunc_getActorMoving)

grFunc_getActorRoom = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorRoom.setParseAction(do_grFunc_getActorRoom)

grFunc_getActorScale = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorScale")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorScale(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorScale.setParseAction(do_grFunc_getActorScale)

grFunc_getActorWalkBox = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorWalkBox")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorWalkBox(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorWalkBox.setParseAction(do_grFunc_getActorWalkBox)

grFunc_getActorWidth = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorWidth")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getActorWidth(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorWidth.setParseAction(do_grFunc_getActorWidth)

grFunc_getActorX = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorX")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_getActorX(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorX.setParseAction(do_grFunc_getActorX)

grFunc_getActorY = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getActorY")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_getActorY(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getActorY.setParseAction(do_grFunc_getActorY)

grFunc_getAnimCounter = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getAnimCounter")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getAnimCounter(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getAnimCounter.setParseAction(do_grFunc_getAnimCounter)

grFunc_getClosestObjActor = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getClosestObjActor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_getClosestObjActor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getClosestObjActor.setParseAction(do_grFunc_getClosestObjActor)

grFunc_getDist = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getDist")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_getDist(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getDist.setParseAction(do_grFunc_getDist)

grFunc_getInventoryCount = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getInventoryCount")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getInventoryCount(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getInventoryCount.setParseAction(do_grFunc_getInventoryCount)

grFunc_getObjectOwner = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getObjectOwner")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_getObjectOwner(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getObjectOwner.setParseAction(do_grFunc_getObjectOwner)

grFunc_getObjectState = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getObjectState")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_getObjectState(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getObjectState.setParseAction(do_grFunc_getObjectState)

grFunc_getRandomNr = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getRandomNr")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getRandomNr(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getRandomNr.setParseAction(do_grFunc_getRandomNr)

grFunc_getStringWidth = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getStringWidth")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_getStringWidth(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getStringWidth.setParseAction(do_grFunc_getStringWidth)

grFunc_getVerbEntryPoint = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("getVerbEntryPoint")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_getVerbEntryPoint(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_getVerbEntryPoint.setParseAction(do_grFunc_getVerbEntryPoint)

grFunc_isScriptRunning = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("isScriptRunning")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_isScriptRunning(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_isScriptRunning.setParseAction(do_grFunc_isScriptRunning)

grFunc_isSoundRunning = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("isSoundRunning")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_isSoundRunning(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_isSoundRunning.setParseAction(do_grFunc_isSoundRunning)

grFunc_lights = Literal("lights")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leByte)("arg2") + SupLit(",") + Group(scummbler_lexicon.leByte)("arg3") + SupLit(")")
def do_grFunc_lights(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2 = to_byte(toks.arg2.value)
    arg3 = to_byte(toks.arg3.value)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_lights.setParseAction(do_grFunc_lights)

grFunc_loadRoom = Literal("loadRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_loadRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_loadRoom.setParseAction(do_grFunc_loadRoom)

# --- Start sub-opcodes ---
grFunc_matrixOp_setBoxFlags = Literal("setBoxFlags")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_matrixOp_setBoxFlags(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_matrixOp_setBoxFlags.setParseAction(do_grFunc_matrixOp_setBoxFlags)
grFunc_matrixOp_setBoxScale = Literal("setBoxScale")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_matrixOp_setBoxScale(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_matrixOp_setBoxScale.setParseAction(do_grFunc_matrixOp_setBoxScale)
grFunc_matrixOp_SetBoxSlot = Literal("SetBoxSlot")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_matrixOp_SetBoxSlot(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_matrixOp_SetBoxSlot.setParseAction(do_grFunc_matrixOp_SetBoxSlot)
grFunc_matrixOp_createBoxMatrix = Literal("createBoxMatrix")("function") + SupLit("(") + SupLit(")")
def do_grFunc_matrixOp_createBoxMatrix(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_matrixOp_createBoxMatrix.setParseAction(do_grFunc_matrixOp_createBoxMatrix)
grFunc_matrixOp_SO = grFunc_matrixOp_setBoxFlags | grFunc_matrixOp_setBoxScale | grFunc_matrixOp_SetBoxSlot | grFunc_matrixOp_createBoxMatrix
def do_grFunc_matrixOp_SO(s, loc, toks):
    return to_byte(opFunctionTable["matrixOp"]) + ''.join(toks)
grFunc_matrixOp_SO.setParseAction(do_grFunc_matrixOp_SO)
# --- End sub-opcodes ---



grFunc_panCameraTo = Literal("panCameraTo")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_panCameraTo(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_panCameraTo.setParseAction(do_grFunc_panCameraTo)

# --- Start sub-opcodes ---
grFunc_print_Pos = Literal("Pos")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_print_Pos(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Pos.setParseAction(do_grFunc_print_Pos)
grFunc_print_Color = Literal("Color")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_print_Color(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Color.setParseAction(do_grFunc_print_Color)
grFunc_print_Clipped = Literal("Clipped")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_print_Clipped(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Clipped.setParseAction(do_grFunc_print_Clipped)
grFunc_print_RestoreBG = Literal("RestoreBG")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_print_RestoreBG(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_RestoreBG.setParseAction(do_grFunc_print_RestoreBG)
grFunc_print_Center = Literal("Center")("function") + SupLit("(") + SupLit(")")
def do_grFunc_print_Center(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Center.setParseAction(do_grFunc_print_Center)
grFunc_print_Left = Literal("Left")("function") + SupLit("(") + SupLit(")")
def do_grFunc_print_Left(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Left.setParseAction(do_grFunc_print_Left)
grFunc_print_Overhead = Literal("Overhead")("function") + SupLit("(") + SupLit(")")
def do_grFunc_print_Overhead(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Overhead.setParseAction(do_grFunc_print_Overhead)
grFunc_print_PlayCDTrack = Literal("PlayCDTrack")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_print_PlayCDTrack(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_PlayCDTrack.setParseAction(do_grFunc_print_PlayCDTrack)
grFunc_print_Text = Literal("Text")("function") + SupLit("(") + scummbler_lexicon.leString("arg1") + SupLit(")")
def do_grFunc_print_Text(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1 = toks.arg1 + "\x00"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print_Text.setParseAction(do_grFunc_print_Text)
grFunc_print_SO = grFunc_print_Pos | grFunc_print_Color | grFunc_print_Clipped | grFunc_print_RestoreBG | grFunc_print_Center | grFunc_print_Left | grFunc_print_Overhead | grFunc_print_PlayCDTrack | grFunc_print_Text
# --- End sub-opcodes ---
grFunc_print = Literal("print")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + SupLit("[") + Optional(delimitedList(grFunc_print_SO))("arg2") + SupLit("]")  + SupLit(")")
def do_grFunc_print(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    if "arg2" in toks:
        arg2 = ''.join(toks.arg2)
    arg3 = "\xFF"
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_print.setParseAction(do_grFunc_print)

grFunc_putActor = Literal("putActor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg3") + SupLit(")")
def do_grFunc_putActor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    arg3, op = resolve_parameter(toks.arg3, op, 0x20, True)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_putActor.setParseAction(do_grFunc_putActor)

grFunc_putActorAtObject = Literal("putActorAtObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_putActorAtObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_putActorAtObject.setParseAction(do_grFunc_putActorAtObject)

grFunc_putActorInRoom = Literal("putActorInRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_putActorInRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_putActorInRoom.setParseAction(do_grFunc_putActorInRoom)

# --- Start sub-opcodes ---
grFunc_Resource_ResourceloadScript = Literal("Resource.loadScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceloadScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadScript.setParseAction(do_grFunc_Resource_ResourceloadScript)
grFunc_Resource_ResourceloadSound = Literal("Resource.loadSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceloadSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadSound.setParseAction(do_grFunc_Resource_ResourceloadSound)
grFunc_Resource_ResourceloadCostume = Literal("Resource.loadCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceloadCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadCostume.setParseAction(do_grFunc_Resource_ResourceloadCostume)
grFunc_Resource_ResourceloadRoom = Literal("Resource.loadRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceloadRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadRoom.setParseAction(do_grFunc_Resource_ResourceloadRoom)
grFunc_Resource_ResourcenukeScript = Literal("Resource.nukeScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcenukeScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcenukeScript.setParseAction(do_grFunc_Resource_ResourcenukeScript)
grFunc_Resource_ResourcenukeSound = Literal("Resource.nukeSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcenukeSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcenukeSound.setParseAction(do_grFunc_Resource_ResourcenukeSound)
grFunc_Resource_ResourcenukeCostume = Literal("Resource.nukeCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcenukeCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcenukeCostume.setParseAction(do_grFunc_Resource_ResourcenukeCostume)
grFunc_Resource_ResourcenukeRoom = Literal("Resource.nukeRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcenukeRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcenukeRoom.setParseAction(do_grFunc_Resource_ResourcenukeRoom)
grFunc_Resource_ResourcelockScript = Literal("Resource.lockScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcelockScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcelockScript.setParseAction(do_grFunc_Resource_ResourcelockScript)
grFunc_Resource_ResourcelockSound = Literal("Resource.lockSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcelockSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcelockSound.setParseAction(do_grFunc_Resource_ResourcelockSound)
grFunc_Resource_ResourcelockCostume = Literal("Resource.lockCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcelockCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcelockCostume.setParseAction(do_grFunc_Resource_ResourcelockCostume)
grFunc_Resource_ResourcelockRoom = Literal("Resource.lockRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcelockRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcelockRoom.setParseAction(do_grFunc_Resource_ResourcelockRoom)
grFunc_Resource_ResourceunlockScript = Literal("Resource.unlockScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceunlockScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceunlockScript.setParseAction(do_grFunc_Resource_ResourceunlockScript)
grFunc_Resource_ResourceunlockSound = Literal("Resource.unlockSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceunlockSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceunlockSound.setParseAction(do_grFunc_Resource_ResourceunlockSound)
grFunc_Resource_ResourceunlockCostume = Literal("Resource.unlockCostume")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceunlockCostume(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceunlockCostume.setParseAction(do_grFunc_Resource_ResourceunlockCostume)
grFunc_Resource_ResourceunlockRoom = Literal("Resource.unlockRoom")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceunlockRoom(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceunlockRoom.setParseAction(do_grFunc_Resource_ResourceunlockRoom)
grFunc_Resource_ResourceclearHeap = Literal("Resource.clearHeap")("function") + SupLit("(") + SupLit(")")
def do_grFunc_Resource_ResourceclearHeap(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceclearHeap.setParseAction(do_grFunc_Resource_ResourceclearHeap)
grFunc_Resource_ResourceloadCharset = Literal("Resource.loadCharset")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourceloadCharset(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadCharset.setParseAction(do_grFunc_Resource_ResourceloadCharset)
grFunc_Resource_ResourcenukeCharset = Literal("Resource.nukeCharset")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_Resource_ResourcenukeCharset(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourcenukeCharset.setParseAction(do_grFunc_Resource_ResourcenukeCharset)
grFunc_Resource_ResourceloadFlObject = Literal("Resource.loadFlObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_Resource_ResourceloadFlObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_Resource_ResourceloadFlObject.setParseAction(do_grFunc_Resource_ResourceloadFlObject)
grFunc_Resource_SO = grFunc_Resource_ResourceloadScript | grFunc_Resource_ResourceloadSound | grFunc_Resource_ResourceloadCostume | grFunc_Resource_ResourceloadRoom | grFunc_Resource_ResourcenukeScript | grFunc_Resource_ResourcenukeSound | grFunc_Resource_ResourcenukeCostume | grFunc_Resource_ResourcenukeRoom | grFunc_Resource_ResourcelockScript | grFunc_Resource_ResourcelockSound | grFunc_Resource_ResourcelockCostume | grFunc_Resource_ResourcelockRoom | grFunc_Resource_ResourceunlockScript | grFunc_Resource_ResourceunlockSound | grFunc_Resource_ResourceunlockCostume | grFunc_Resource_ResourceunlockRoom | grFunc_Resource_ResourceclearHeap | grFunc_Resource_ResourceloadCharset | grFunc_Resource_ResourcenukeCharset | grFunc_Resource_ResourceloadFlObject
def do_grFunc_Resource_SO(s, loc, toks):
    return to_byte(opFunctionTable["Resource"]) + ''.join(toks)
grFunc_Resource_SO.setParseAction(do_grFunc_Resource_SO)
# --- End sub-opcodes ---



grFunc_setCameraAt = Literal("setCameraAt")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_setCameraAt(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_setCameraAt.setParseAction(do_grFunc_setCameraAt)

grFunc_setObjectName = Literal("setObjectName")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + scummbler_lexicon.leString("arg2") + SupLit(")")
def do_grFunc_setObjectName(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2 = toks.arg2 + "\x00"
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_setObjectName.setParseAction(do_grFunc_setObjectName)

grFunc_setOwnerOf = Literal("setOwnerOf")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_setOwnerOf(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_setOwnerOf.setParseAction(do_grFunc_setOwnerOf)

grFunc_setState = Literal("setState")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_setState(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_setState.setParseAction(do_grFunc_setState)

grFunc_soundKludge = Literal("soundKludge")("function") + SupLit("(") + scummbler_lexicon.leArgList("arg1") + SupLit(")")
def do_grFunc_soundKludge(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    for a in toks.arg1:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg1 += to_byte(aux) + a
    arg1 += "\xFF"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_soundKludge.setParseAction(do_grFunc_soundKludge)

grFunc_startMusic = Literal("startMusic")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_startMusic(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_startMusic.setParseAction(do_grFunc_startMusic)

grFunc_startObject = Literal("startObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(",") + scummbler_lexicon.leArgList("arg3") + SupLit(")")
def do_grFunc_startObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    for a in toks.arg3:
        aux = 0x01
        a, aux = resolve_parameter(a, aux, 0x80, True)
        arg3 += to_byte(aux) + a
    arg3 += "\xFF"
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_startObject.setParseAction(do_grFunc_startObject)

grFunc_startSound = Literal("startSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_startSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_startSound.setParseAction(do_grFunc_startSound)

grFunc_stopMusic = Literal("stopMusic")("function") + SupLit("(") + SupLit(")")
def do_grFunc_stopMusic(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stopMusic.setParseAction(do_grFunc_stopMusic)

grFunc_stopObjectScript = Literal("stopObjectScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_stopObjectScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stopObjectScript.setParseAction(do_grFunc_stopObjectScript)

grFunc_stopScript = Literal("stopScript")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_stopScript(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stopScript.setParseAction(do_grFunc_stopScript)

grFunc_stopSound = Literal("stopSound")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_stopSound(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stopSound.setParseAction(do_grFunc_stopSound)

# --- Start sub-opcodes ---
grFunc_stringOps_PutCodeInString = Literal("PutCodeInString")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + scummbler_lexicon.leString("arg2") + SupLit(")")
def do_grFunc_stringOps_PutCodeInString(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2 = toks.arg2 + "\x00"
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stringOps_PutCodeInString.setParseAction(do_grFunc_stringOps_PutCodeInString)
grFunc_stringOps_CopyString = Literal("CopyString")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_stringOps_CopyString(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stringOps_CopyString.setParseAction(do_grFunc_stringOps_CopyString)
grFunc_stringOps_SetStringChar = Literal("SetStringChar")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg3") + SupLit(")")
def do_grFunc_stringOps_SetStringChar(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    arg3, op = resolve_parameter(toks.arg3, op, 0x20, False)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stringOps_SetStringChar.setParseAction(do_grFunc_stringOps_SetStringChar)
grFunc_stringOps_GetStringChar = Group(scummbler_lexicon.leVariable)("target") + SupLit("=") + Literal("GetStringChar")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_stringOps_GetStringChar(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    target = resolve_var(toks.target)
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stringOps_GetStringChar.setParseAction(do_grFunc_stringOps_GetStringChar)
grFunc_stringOps_CreateString = Literal("CreateString")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_stringOps_CreateString(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_stringOps_CreateString.setParseAction(do_grFunc_stringOps_CreateString)
grFunc_stringOps_SO = grFunc_stringOps_PutCodeInString | grFunc_stringOps_CopyString | grFunc_stringOps_SetStringChar | grFunc_stringOps_GetStringChar | grFunc_stringOps_CreateString
def do_grFunc_stringOps_SO(s, loc, toks):
    return to_byte(opFunctionTable["stringOps"]) + ''.join(toks)
grFunc_stringOps_SO.setParseAction(do_grFunc_stringOps_SO)
# --- End sub-opcodes ---



# --- Start sub-opcodes ---
grFunc_VerbOps_Image = Literal("Image")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_VerbOps_Image(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Image.setParseAction(do_grFunc_VerbOps_Image)
grFunc_VerbOps_Text = Literal("Text")("function") + SupLit("(") + scummbler_lexicon.leString("arg1") + SupLit(")")
def do_grFunc_VerbOps_Text(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1 = toks.arg1 + "\x00"
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Text.setParseAction(do_grFunc_VerbOps_Text)
grFunc_VerbOps_Color = Literal("Color")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_VerbOps_Color(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Color.setParseAction(do_grFunc_VerbOps_Color)
grFunc_VerbOps_HiColor = Literal("HiColor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_VerbOps_HiColor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_HiColor.setParseAction(do_grFunc_VerbOps_HiColor)
grFunc_VerbOps_SetXY = Literal("SetXY")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_VerbOps_SetXY(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_SetXY.setParseAction(do_grFunc_VerbOps_SetXY)
grFunc_VerbOps_On = Literal("On")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_On(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_On.setParseAction(do_grFunc_VerbOps_On)
grFunc_VerbOps_Off = Literal("Off")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_Off(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Off.setParseAction(do_grFunc_VerbOps_Off)
grFunc_VerbOps_Delete = Literal("Delete")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_Delete(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Delete.setParseAction(do_grFunc_VerbOps_Delete)
grFunc_VerbOps_New = Literal("New")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_New(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_New.setParseAction(do_grFunc_VerbOps_New)
grFunc_VerbOps_DimColor = Literal("DimColor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_VerbOps_DimColor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_DimColor.setParseAction(do_grFunc_VerbOps_DimColor)
grFunc_VerbOps_Dim = Literal("Dim")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_Dim(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Dim.setParseAction(do_grFunc_VerbOps_Dim)
grFunc_VerbOps_Key = Literal("Key")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_VerbOps_Key(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Key.setParseAction(do_grFunc_VerbOps_Key)
grFunc_VerbOps_Center = Literal("Center")("function") + SupLit("(") + SupLit(")")
def do_grFunc_VerbOps_Center(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_Center.setParseAction(do_grFunc_VerbOps_Center)
grFunc_VerbOps_SetToString = Literal("SetToString")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(")")
def do_grFunc_VerbOps_SetToString(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_SetToString.setParseAction(do_grFunc_VerbOps_SetToString)
grFunc_VerbOps_SetToObject = Literal("SetToObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrWord)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(")")
def do_grFunc_VerbOps_SetToObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, True)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_SetToObject.setParseAction(do_grFunc_VerbOps_SetToObject)
grFunc_VerbOps_BackColor = Literal("BackColor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_VerbOps_BackColor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps_BackColor.setParseAction(do_grFunc_VerbOps_BackColor)
grFunc_VerbOps_SO = grFunc_VerbOps_Image | grFunc_VerbOps_Text | grFunc_VerbOps_Color | grFunc_VerbOps_HiColor | grFunc_VerbOps_SetXY | grFunc_VerbOps_On | grFunc_VerbOps_Off | grFunc_VerbOps_Delete | grFunc_VerbOps_New | grFunc_VerbOps_DimColor | grFunc_VerbOps_Dim | grFunc_VerbOps_Key | grFunc_VerbOps_Center | grFunc_VerbOps_SetToString | grFunc_VerbOps_SetToObject | grFunc_VerbOps_BackColor
# --- End sub-opcodes ---
grFunc_VerbOps = Literal("VerbOps")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + SupLit("[") + Optional(delimitedList(grFunc_VerbOps_SO))("arg2") + SupLit("]")  + SupLit(")")
def do_grFunc_VerbOps(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    if "arg2" in toks:
        arg2 = ''.join(toks.arg2)
    arg3 = "\xFF"
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_VerbOps.setParseAction(do_grFunc_VerbOps)

# --- Start sub-opcodes ---
grFunc_wait_WaitForActor = Literal("WaitForActor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(")")
def do_grFunc_wait_WaitForActor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_wait_WaitForActor.setParseAction(do_grFunc_wait_WaitForActor)
grFunc_wait_WaitForMessage = Literal("WaitForMessage")("function") + SupLit("(") + SupLit(")")
def do_grFunc_wait_WaitForMessage(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_wait_WaitForMessage.setParseAction(do_grFunc_wait_WaitForMessage)
grFunc_wait_WaitForCamera = Literal("WaitForCamera")("function") + SupLit("(") + SupLit(")")
def do_grFunc_wait_WaitForCamera(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_wait_WaitForCamera.setParseAction(do_grFunc_wait_WaitForCamera)
grFunc_wait_WaitForSentence = Literal("WaitForSentence")("function") + SupLit("(") + SupLit(")")
def do_grFunc_wait_WaitForSentence(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    # No arg1
    # No arg2
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_wait_WaitForSentence.setParseAction(do_grFunc_wait_WaitForSentence)
grFunc_wait_SO = grFunc_wait_WaitForActor | grFunc_wait_WaitForMessage | grFunc_wait_WaitForCamera | grFunc_wait_WaitForSentence
def do_grFunc_wait_SO(s, loc, toks):
    return to_byte(opFunctionTable["wait"]) + ''.join(toks)
grFunc_wait_SO.setParseAction(do_grFunc_wait_SO)
# --- End sub-opcodes ---



grFunc_walkActorTo = Literal("walkActorTo")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg3") + SupLit(")")
def do_grFunc_walkActorTo(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    arg3, op = resolve_parameter(toks.arg3, op, 0x20, True)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_walkActorTo.setParseAction(do_grFunc_walkActorTo)

grFunc_walkActorToActor = Literal("walkActorToActor")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrByte)("arg2") + SupLit(",") + Group(scummbler_lexicon.leByte)("arg3") + SupLit(")")
def do_grFunc_walkActorToActor(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, False)
    arg3 = to_byte(toks.arg3.value)
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_walkActorToActor.setParseAction(do_grFunc_walkActorToActor)

grFunc_walkActorToObject = Literal("walkActorToObject")("function") + SupLit("(") + Group(scummbler_lexicon.leVarOrByte)("arg1") + SupLit(",") + Group(scummbler_lexicon.leVarOrWord)("arg2") + SupLit(")")
def do_grFunc_walkActorToObject(s, loc, toks):
    target = arg1 = arg2 = arg3 = ""
    op = opFunctionTable[toks.function]
    # No target
    arg1, op = resolve_parameter(toks.arg1, op, 0x80, False)
    arg2, op = resolve_parameter(toks.arg2, op, 0x40, True)
    # No arg3
    return to_byte(op) + target + arg1 + arg2 + arg3
grFunc_walkActorToObject.setParseAction(do_grFunc_walkActorToObject)

grFunctions = grFunc_actorFollowCamera | grFunc_actorFromPos | grFunc_ActorOps | grFunc_setClass | grFunc_animateCostume | grFunc_breakHere | grFunc_chainScript | grFunc_cursorCommand_SO | grFunc_cutscene | grFunc_debug | grFunc_delayVariable | grFunc_dummyA7 | grFunc_endCutscene | grFunc_faceActor | grFunc_findInventory | grFunc_findObject | grFunc_freezeScripts | grFunc_getActorCostume | grFunc_getActorElevation | grFunc_getActorFacing | grFunc_getActorMoving | grFunc_getActorRoom | grFunc_getActorScale | grFunc_getActorWalkBox | grFunc_getActorWidth | grFunc_getActorX | grFunc_getActorY | grFunc_getAnimCounter | grFunc_getClosestObjActor | grFunc_getDist | grFunc_getInventoryCount | grFunc_getObjectOwner | grFunc_getObjectState | grFunc_getRandomNr | grFunc_getStringWidth | grFunc_getVerbEntryPoint | grFunc_isScriptRunning | grFunc_isSoundRunning | grFunc_lights | grFunc_loadRoom | grFunc_matrixOp_SO | grFunc_panCameraTo | grFunc_print | grFunc_putActor | grFunc_putActorAtObject | grFunc_putActorInRoom | grFunc_Resource_SO | grFunc_setCameraAt | grFunc_setObjectName | grFunc_setOwnerOf | grFunc_setState | grFunc_soundKludge | grFunc_startMusic | grFunc_startObject | grFunc_startSound | grFunc_stopMusic | grFunc_stopObjectScript | grFunc_stopScript | grFunc_stopSound | grFunc_stringOps_SO | grFunc_VerbOps | grFunc_wait_SO | grFunc_walkActorTo | grFunc_walkActorToActor | grFunc_walkActorToObject
